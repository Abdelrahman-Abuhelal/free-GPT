w3schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills. enjoy our free tutorials like millions of other internet users since 1999 explore our selection of references covering all popular coding languages create your own website with w3schools spaces - no setup required test your skills with different exercises test yourself with multiple choice questions document your knowledge create a free w3schools account to improve your learning experience track your learning progress at w3schools and collect rewards become a pro user and unlock powerful features (ad-free, hosting, videos,..) not sure where you want to start? follow our guided path with our online code editor, you can edit code and view the result in your browser learn the basics of html in a fun and engaging video tutorial we have created a bunch of responsive website templates you can use - for free! host your own website, and share it to the world with w3schools spaces create your own server using python, php, react.js, node.js, java, c#, etc. large collection of code snippets for html, css and javascript build fast and responsive sites using our free w3.css framework read long term trends of browser usage test your typing speed learn amazon web services use our color picker to find different rgb, hex and hsl colors. w3schools coding game! help the lynx collect pine cones find jobs or hire talent with w3schools pathfinder join our newsletter and get access to exclusive content every month if you try to access a page that does not exist (a 404 error), django directs you to a built-in view that handles 404 errors. you will learn how to customize this 404 view later in this chapter, but first, just try to request a page that does not exist. in the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar. you will get one of two results: 1: 2: if you got the first result, you got directed to the built-in django 404 template. if you got the second result, then debug is set to true in your settings, and you must set it to false to get directed to the 404 template. this is done in the settings.py file, which is located in the project folder, in our case the my_tennis_club folder, where you also have to specify the host name from where your project runs from: set the debug property to false, and allow the project to run from your local host: my_tennis_club/my_tennis_club/settings.py: important: when debug = false, django requires you to specify the hosts you will allow this django project to run from. in production, this should be replaced with a proper domain name: allowed_hosts = ['yourdomain.com'] in the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar, and you will get the built-in 404 template: django will look for a file named 404.html in the templates folder, and display it when there is a 404 error. if no such file exists, django shows the "not found" that you saw in the example above. to customize this message, all you have to do is to create a file in the templates folder and name it 404.html, and fill it with whatever you want: my_tennis_club/members/templates/404.html: in the browser window, type 127.0.0.1:8000/masfdfg/ in the address bar, and you will get the customized 404 template: if you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail: help@w3schools.com